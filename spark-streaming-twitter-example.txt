start-dfs.sh      # start the hadoop daemons
start-master.sh   # start the spark cluster master 
start-slaves.sh   # start the spark cluster slaves

# download the related twitter jars
spark-shell --packages org.apache.bahir:spark-streaming-twitter_2.11:2.3.2

# copy the related twitter jars to $SPARK_HOME/jars
cp .ivy2/jars/* $SPARK_HOME/jars

# restart the spark-shell using the spark standalone cluster
spark-shell --master spark://spks:7077

-----------------------

import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.streaming.twitter._
import twitter4j.Status
import twitter4j.auth.OAuthAuthorization
import twitter4j.conf.ConfigurationBuilder

val builder = new ConfigurationBuilder()
builder.setDebugEnabled(true)
builder.setOAuthConsumerKey("<ConsumerKey>")
builder.setOAuthConsumerSecret("<ConsumerSecret>")
builder.setOAuthAccessToken("<AccessToken>")
builder.setOAuthAccessTokenSecret("<AccessTokenSecret>")

val auth = new OAuthAuthorization(builder.build)

val filters = Array("trump", "donald")

val ssc = new StreamingContext(sc,Seconds(10))
val twitterStream = TwitterUtils.createStream(ssc, Some(auth), filters )

val tweets = twitterStream.filter(tweet => tweet.getLang.equals("en") || tweet.getLang.equals("")).map(_.getText()).map(_.replaceAll("/[^A-Za-z0-9 ]/", "")).map(_.replaceAll("/", "")).map(_.replaceAll("RT.+?(?=\\s)\\s", "")).map(_.replaceAll("https([^\\s]+).*", ""))

tweets.repartition(1).saveAsTextFiles("hdfs://spkm:9000/twitter/tweets","json")

// tweets.foreachRDD( rdd =>
//  rdd.foreachPartition ( iter =>
//    iter.foreach(println)
//  )
// )

sc.setCheckpointDir("/home/hadoop/checkpoint")
//ssc.checkpoint("hdfs://localhost:9000/user/hduser/checkpoint")

ssc.start()

--------------------------------------

tweets.foreachRDD( rdd => {
  val topList = rdd.take(10)
  topList.foreach(println)
  })
  

tweets.foreachRDD(rdd => {
  val topList = rdd.take(10)
  println("\nPopular topics in last 60 seconds (%s total):".format(rdd.count()))
  topList.foreach{case (count, tag) => println("%s (%s tweets)".format(tag, count))}
})